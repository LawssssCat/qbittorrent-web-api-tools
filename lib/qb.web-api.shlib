#!/bin/bash

# defaults, but use exported values if they are set
: ${qbt_host:=http://127.0.0.1}
: ${qbt_port:=8080}
: ${qbt_username:=admin}
: ${qbt_password:=adminadmin}

# paths
jq_executable="$(command -v jq)"
curl_executable="$(command -v curl)"

if [[ ! -x $jq_executable ]]; then
    fatal $EXIT_EXCEPTION "${COLOR_RED}Fail on jq. Aborting.${COLOR_RESET}" "\n" \
    "You can find it here: https://stedolan.github.io/jq/"    "\n" \
    "Or you can install it with -> sudo apt install jq"
fi

if [[ ! -x $curl_executable ]]; then
    fatal $EXIT_EXCEPTION "${COLOR_RED}Fail on curl. Aborting.${COLOR_RESET}" "\n" \
    "You can install it with -> sudo apt install curl"
fi

export jq_executable
export curl_executable

curl_executable="$curl_executable --silent --fail --show-error --connect-timeout 120"

###
# qbittorrent web-api functions
###

#
# call qbittorrent webui api. 
#
# env:
# + ${qbt_host} -- webui host. e.g. http://127.0.0.1
# + ${qbt_port} -- webui port. e.g. 8080
#
# function:
# call_web_api <method> <uri> <body> [curl options...]
#
# return:
# + qbt_webapi_response_status -- response status code
# + qbt_webapi_response_error  -- response error message
# + qbt_webapi_response_body   -- response body string
#
function call_web_api {
    local request_method="$1" # GET/POST
    local request_path="${qbt_host}:${qbt_port}/${2/\/}"
    local request_body="$3"
    shift $(($#>3 ? 3 : $#))
    local curl_opts="$@"

    local qbt_webapi_response=""
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        $curl_opts \
        --data "$request_body" \
        --write-out "\n%{http_code}" \
        --cookie - \
        --request $request_method "$request_path" 2>&1)
    local qbt_webapi_request_return="$?"
    debug "$request_method $request_path <--> \"$qbt_webapi_response\""

    reset_web_api_response # reset
    if [ $qbt_webapi_request_return -eq 0 ]; then
        qbt_webapi_response_body="$(echo "$qbt_webapi_response" | head -n -1)"
        qbt_webapi_response_status="$(echo "$qbt_webapi_response" | tail -n 1)"
    else
        qbt_webapi_response_error="$(echo "$qbt_webapi_response" | head -n -1)"
        qbt_webapi_response_status="$(echo "$qbt_webapi_response" | tail -n 1)"
    fi
    return $qbt_webapi_request_return
}

function reset_web_api_response {
    qbt_webapi_response_error=""
    qbt_webapi_response_body=""
    qbt_webapi_response_status=""
}

# https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#login
# 403	User's IP is banned for too many failed login attempts
# 200	All other scenarios
function get_cookie {
    if [ -n "$qbt_cookie" ]; then
        reset_web_api_response
        qbt_webapi_response_body="$qbt_cookie"
        qbt_webapi_response_status="200"
        return $EXIT_OK
    fi
    local qbt_cookie_path='/tmp/qbittorrent-web-api-tools-cookie'
    call_web_api "POST" "/api/v2/auth/login" "username=${qbt_username}&password=${qbt_password}" --cookie-jar "$qbt_cookie_path"
    if [ "$qbt_webapi_response_status" -eq 200 ] && [ "$qbt_webapi_response_body" == "Ok." ]; then
        qbt_cookie="$(cat $qbt_cookie_path)"
        return $EXIT_OK
    elif [ "$qbt_webapi_response_status" -eq 200 ] && [ "$qbt_webapi_response_body" == "Fails." ]; then
        qbt_webapi_response_error="Login fail; $qbt_webapi_response_error"
        return $EXIT_ERROR
    elif [ "$qbt_webapi_response_status" -eq 403 ]; then
        qbt_webapi_response_error="User's IP is banned for too many failed login attempts.; $qbt_webapi_response_error"
        return $EXIT_ERROR
    else
        qbt_webapi_response_error="Unknown error; $qbt_webapi_response_error"
        return $EXIT_ERROR
    fi
}

# https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-application-preferences
# 200	All scenarios- see JSON below
function get_app_preferences {
    get_cookie || return $?
    call_web_api "GET" "/api/v2/app/preferences" ""
    if [ "$qbt_webapi_response_status" -eq 200 ]; then
        return $EXIT_OK
    else
        qbt_webapi_response_error="Unknown error; $qbt_webapi_response_error"
        return $EXIT_ERROR
    fi
}

# https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#set-application-preferences
# 200	All scenarios
function set_app_preferences {
    local app_preferences="$1" # json format, e.g. {"save_path":"C:/Users/Dayman/Downloads","queueing_enabled":false,"scan_dirs":{"C:/Games": 0,"D:/Downloads": 1}}
    get_cookie || return $?
    call_web_api "POST" "/api/v2/app/setPreferences" "json=$app_preferences"
    if [ "$qbt_webapi_response_status" -eq 200 ]; then
        return $EXIT_OK
    else
        qbt_webapi_response_error="Unknown error; $qbt_webapi_response_error"
        return $EXIT_ERROR
    fi
}

function get_torrent_trackers {
    local torrent_hash="$1" # e.g. 8c212779b4abde7c6bc608063a0d008b7e40ce32
    [ -z "$torrent_hash" ] && fatal $EXIT_ARGUMENT 'Fail for argument#1 "torrent_hash" unfound'
    # 404 -- Torrent hash was not found
    # 200 -- All other scenarios - see https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-trackers
    get_cookie &&
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        --cookie - \
        -w "%{http_code}\n" \
        --request GET "${qbt_host}:${qbt_port}/api/v2/torrents/trackers?hash=$torrent_hash")

    qbt_torrent_trackers=$qbt_webapi_response_body
}

function add_torrent_trackers {
    local torrent_hash="$1" # e.g. 8c212779b4abde7c6bc608063a0d008b7e40ce32
    local tracker_urls="$2" # e.g. http://192.168.0.1/announce%0Audp://192.168.0.1:3333/dummyAnnounce
    # 404 -- Torrent hash was not found
    # 200 -- All other scenarios
    get_cookie &&
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        -d "hash=$torrent_hash&urls=$tracker_urls" \
        --cookie - \
        --request POST "${qbt_host}:${qbt_port}/api/v2/torrents/addTrackers") || return $EXIT_ERROR
}

function remove_torrent_trackers {
    local torrent_hash="$1" # e.g. 8c212779b4abde7c6bc608063a0d008b7e40ce32
    local tracker_urls="$2" # e.g. http://192.168.0.1/announce|udp://192.168.0.1:3333/dummyAnnounce
    # 404 -- Torrent hash was not found
    # 409 -- All urls were not found
    # 200 -- All other scenarios
    get_cookie &&
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        -d "hash=$torrent_hash&urls=$tracker_urls" \
        --cookie - \
        --request POST "${qbt_host}:${qbt_port}/api/v2/torrents/removeTrackers") || return $EXIT_ERROR
}

function get_torrent_peers {
    local torrent_hash="$1"
    get_cookie &&
    qbt_torrent_peers=$(echo "$qbt_cookie" | $curl_executable \
        --cookie - \
        --request GET "${qbt_host}:${qbt_port}/api/v2/sync/torrentPeers?hash=$torrent_hash") || return $EXIT_ERROR
}

function add_ban_peers {
    local torrent_peers="$@" # Each peer is a colon-separated `host:port`. e.g. 11.11.11.11:6881
    torrent_peers="$(echo $torrent_peers | tr " " "|")" # Multiple peers separated by a pipe `|`. e.g. 11.11.11.11:6881|12.12.12.12:6891
    [ -z "$torrent_peers" ] && fatal $EXIT_ARGUMENT 'Fail for argument#1...n "torrent_peers" unfound'
    get_cookie &&
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        -d "peers=$torrent_peers" \
        --cookie - \
        --request POST "${qbt_host}:${qbt_port}/api/v2/transfer/banPeers")
}

function get_torrents {
    # params - https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list
    local params="$1" # e.g. filter=downloading&category=sample%20category&sort=ratio
    if [ -n "$params" ]; then
        params="?$params"
    fi
    get_cookie &&
    qbt_torrents=$(echo "$qbt_cookie" | $curl_executable \
        --cookie - \
        --request GET "${qbt_host}:${qbt_port}/api/v2/torrents/info${params}")
}

function reannounce_torrent {
    local torrent_hash="$1" # e.g. all, 8c212779b4abde7c6bc608063a0d008b7e40ce32|54eddd830a5b58480a6143d616a97e3a6c23c439
    # 200 -- All scenarios
    get_cookie &&
    qbt_webapi_response=$(echo "$qbt_cookie" | $curl_executable \
        --cookie - \
        --request GET "${qbt_host}:${qbt_port}/api/v2/torrents/reannounce?hashes=$torrent_hash") || return $EXIT_ERROR
}

# other functions
function fetch_net_trackers {
    local fetch_urls="$@"
    [ -z "$fetch_urls" ] && fatal $EXIT_ARGUMENT 'Fail for argument#1 "fetch_urls" unfound'
    local tmp_trackers=""
    qbt_net_exception_urls=() # todo local
    qbt_net_exception_issues=()
    for j in $fetch_urls; do
        local tmp_fetch_result=""
        tmp_fetch_result=$($curl_executable --connect-timeout 20 $j 2>&1)
        if [ $? -ne 0 ] ; then
            qbt_net_exception_urls+=("$j")
            qbt_net_exception_issues+=("$tmp_fetch_result")
            continue
        fi
        tmp_trackers+="$(echo "$tmp_fetch_result" | grep -e '^http://' -e '^https://' -e '^udp://')"
        tmp_trackers+=$'\n'
    done
    qbt_net_trackers="$(echo "$tmp_trackers" | lines_trim | lines_unique)"
}

function get_matching_peers {
    local pattern_peer="$1"
    # torrents
    local qbt_torrent_hashs=""
    get_torrents "filter=active" && qbt_torrent_hashs="$(echo "$qbt_torrents" | $jq_executable ".[].hash" -r)" || return $EXIT_ERROR
    # peers
    local tmp_mached_peers=""
    for h in $qbt_torrent_hashs; do 
        get_torrent_peers "$h" && 
        local tmp_peers=""
        tmp_mached_peers+="$(echo "$qbt_torrent_peers" \
        | $jq_executable ".peers | to_entries[]" -c \
        | grep -E "$pattern_peer"
        )" &&
        tmp_mached_peers+=$'\n'
    done
    qbt_mached_peers="$(echo "$tmp_mached_peers" | lines_trim | lines_unique)" 
}
